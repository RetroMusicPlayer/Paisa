# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - avoid_print
    - avoid_redundant_argument_values
    - prefer_single_quotes
    - prefer_const_constructors
    - prefer_constant_declarations
    - prefer_relative_imports: false
    - depend_on_referenced_packages: false
    - sort_pub_dependencies
    - always_use_package_imports
    - prefer_const_constructors_in_immutables
    - prefer_final_fields
    - always_declare_return_types
    - always_declare_return_types

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    cyclomatic-complexity: 20
    maximum-nesting-level: 5
    number-of-parameters: 4
    source-lines-of-code: 50
  metrics-exclude:
    - test/**
  rules:
    - newline-before-return
    - no-boolean-literal-compare
    - prefer-trailing-comma
    - prefer-conditional-expressions
    - no-equal-then-else
    - avoid-cascade-after-if-null
    - avoid-collection-methods-with-unrelated-types
    - avoid-duplicate-exports
  # - avoid-dynamic
    - avoid-missing-enum-constant-in-map
  # - avoid-passing-async-when-sync-expected
    - avoid-throw-in-catch-block
    - avoid-unused-parameters
    - avoid-unnecessary-type-assertions
    - avoid-unnecessary-type-casts
    - avoid-unrelated-type-assertions
    - avoid-unrelated-type-casts
  # - no-empty-block
    - prefer-correct-test-file-name
  # - prefer-match-file-name
    - prefer-return-await
    - avoid-self-assignment
    - avoid-self-compare
  # - avoid-shadowing
    - prefer-iterable-of
  # - no-equal-switch-case
    - no-equal-conditions
    - avoid-equal-expressions
    - avoid-missed-calls
    - avoid-unnecessary-negations
    - avoid-unused-generics
    - function-always-returns-null
    - avoid-throw-objects-without-tostring
    - avoid-unsafe-collection-methods
    - prefer-wildcard-pattern
    - no-equal-switch-expression-cases
    - avoid-future-tostring
    - avoid-unassigned-late-fields
    - avoid-nested-futures
    - avoid-generics-shadowing
    - prefer-parentheses-with-if-null
    - no-equal-nested-conditions
    - avoid-shadowed-extension-methods
    - avoid-unnecessary-conditionals
    - avoid-double-slash-imports
    - avoid-map-keys-contains
    - prefer-correct-json-casts
    - avoid-duplicate-mixins
    - avoid-nullable-interpolation
    - avoid-unused-instances
    - prefer-correct-for-loop-increment
    - prefer-public-exception-classes
    - avoid-uncaught-future-errors
    - always-remove-listener
    - avoid-unnecessary-setstate
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - use-setstate-synchronously
    - avoid-incomplete-copy-with
    - proper-super-calls
  # - dispose-fields
  # - avoid-empty-setstate
    - avoid-state-constructors
    - avoid-recursive-widget-calls
    - avoid-missing-image-alt
  # - avoid-passing-self-as-argument
    - avoid-unnecessary-if
    - avoid-unconditional-break
    - avoid-referencing-discarded-variables
    - avoid-unnecessary-local-late
    - avoid-wildcard-cases-with-enums
    - match-getter-setter-field-names
    - avoid-accessing-collections-by-constant-index
    - prefer-unique-test-names
    - avoid-duplicate-cascades
    - prefer-specific-cases-first
    - avoid-duplicate-switch-case-conditions
    - prefer-explicit-function-type
    - avoid-misused-test-matchers
    - avoid-duplicate-test-assertions
    - prefer-switch-with-enums
    - prefer-any-or-every
    - avoid-duplicate-map-keys
    - avoid-nullable-tostring
    - avoid-undisposed-instances
    - avoid-duplicate-initializers
    - avoid-unassigned-stream-subscriptions
    # Enable with the next release
    # - avoid-empty-test-groups
    # - avoid-not-encodable-in-to-json
    # - avoid-contradictory-expressions
    # - avoid-excessive-expressions

    # Code simplification
  # - avoid-redundant-async
    - avoid-redundant-else
    - avoid-unnecessary-nullable-return-type
    - avoid-redundant-pragma-inline
    - avoid-nested-records
    - avoid-redundant-positional-field-name
    - avoid-explicit-pattern-field-name
    - prefer-simpler-patterns-null-check
    - avoid-unnecessary-return
    - avoid-duplicate-patterns
    - avoid-keywords-in-wildcard-pattern
  # - avoid-unnecessary-futures
    - avoid-unnecessary-reassignment
  # - avoid-unnecessary-call
    - avoid-unnecessary-stateful-widgets
    - prefer-dedicated-media-query-methods
    - avoid-unnecessary-overrides-in-state
    - move-variable-closer-to-its-usage
    - avoid-nullable-parameters-with-default-values
    - prefer-null-aware-spread
  # - avoid-inferrable-type-arguments
    - avoid-unnecessary-super
